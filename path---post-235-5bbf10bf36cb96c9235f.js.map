{"version":3,"sources":["webpack:///path---post-235-5bbf10bf36cb96c9235f.js","webpack:///./.cache/json/post-235.json"],"names":["webpackJsonp","1060","module","exports","data","tweetsJson","from","date","tags","text","searchResults","title","href","description","index","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,YAAcC,KAAA,aAAAC,KAAA,aAAAC,KAAA,eAAAC,KAAA,kCAAAC,gBAAyHC,MAAA,kDAAAC,KAAA,4DAAAC,YAAA,6RAAwaF,MAAA,gCAAAC,KAAA,2CAAAC,YAAA,0UAAkbF,MAAA,sEAAAC,KAAA,wEAAAC,YAAA,mTAA4dC,MAAA,MAAeC,aAAgBD,MAAA","file":"path---post-235-5bbf10bf36cb96c9235f.js","sourcesContent":["webpackJsonp([54930214675177],{\n\n/***/ 1060:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"tweetsJson\":{\"from\":\"David Lowe\",\"date\":\"5 Nov 2014\",\"tags\":\"#agile #lean\",\"text\":\"Little’s Law | Scrum and Kanban\",\"searchResults\":[{\"title\":\"Little's Law and KanBan | Capgemini Engineering\",\"href\":\"https://capgemini.github.io/agile/Littles-Law-and-KanBan/\",\"description\":\"12 Dec 2014 ... Little's Law is often quoted in the context of KanBan. Little's Law is a mathematical theory of probability in the context of queueing theory: L = λW. In practical terms this means: response time can be calculated from number in the system and throughput (W = L/λ)\"},{\"title\":\"Little's Law - Scrum & Kanban\",\"href\":\"http://scrumandkanban.co.uk/littles-law/\",\"description\":\"28 Oct 2014 ... What is Little's Law? If you have a stable system (e.g. one-in-one-out), then the \\naverage number of customers you have within that system is equal to the \\naverage rate of customer arrivals multiplied by the average time a customer \\nspends in the system. That was the law proposed by John Little in the ...\"},{\"title\":\"Little's Law – the basis of Lean and Kanban | It's a Delivery Thing\",\"href\":\"http://itsadeliverything.com/littles-law-the-basis-of-lean-and-kanban\",\"description\":\"6 Apr 2015 ... Little's Law – the basis of Lean and Kanban. ... And when using Lean Software Development, including Kanban, that means a man called Little and his Law. “Little's Law” is a fundamental of queue theory and defines the relationship between Work in Progress (WIP), Throughput and Lead Time.\"}],\"index\":235}},\"pathContext\":{\"index\":235}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---post-235-5bbf10bf36cb96c9235f.js","module.exports = {\"data\":{\"tweetsJson\":{\"from\":\"David Lowe\",\"date\":\"5 Nov 2014\",\"tags\":\"#agile #lean\",\"text\":\"Little’s Law | Scrum and Kanban\",\"searchResults\":[{\"title\":\"Little's Law and KanBan | Capgemini Engineering\",\"href\":\"https://capgemini.github.io/agile/Littles-Law-and-KanBan/\",\"description\":\"12 Dec 2014 ... Little's Law is often quoted in the context of KanBan. Little's Law is a mathematical theory of probability in the context of queueing theory: L = λW. In practical terms this means: response time can be calculated from number in the system and throughput (W = L/λ)\"},{\"title\":\"Little's Law - Scrum & Kanban\",\"href\":\"http://scrumandkanban.co.uk/littles-law/\",\"description\":\"28 Oct 2014 ... What is Little's Law? If you have a stable system (e.g. one-in-one-out), then the \\naverage number of customers you have within that system is equal to the \\naverage rate of customer arrivals multiplied by the average time a customer \\nspends in the system. That was the law proposed by John Little in the ...\"},{\"title\":\"Little's Law – the basis of Lean and Kanban | It's a Delivery Thing\",\"href\":\"http://itsadeliverything.com/littles-law-the-basis-of-lean-and-kanban\",\"description\":\"6 Apr 2015 ... Little's Law – the basis of Lean and Kanban. ... And when using Lean Software Development, including Kanban, that means a man called Little and his Law. “Little's Law” is a fundamental of queue theory and defines the relationship between Work in Progress (WIP), Throughput and Lead Time.\"}],\"index\":235}},\"pathContext\":{\"index\":235}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/post-235.json\n// module id = 1060\n// module chunks = 54930214675177"],"sourceRoot":""}